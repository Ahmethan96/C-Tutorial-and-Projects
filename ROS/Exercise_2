Let's put in practice all these data types we just learned!

In this exercise we are going to create a dictionary that will store the x position of the robot over time, and print it in the shell.

First, modify the program unit1_exercise.cpp of the previous exercise to get the x coordinate of the robot by calling the get_position() method, and also get the time of simulation by calling the get_time() method. Note that get_position() and get_time() are methods of the RosbotClass and you need to type rosbot.get_time() instead of just get_time() which is what you would write to call a regular function. (Hint: the timestamp will have a data type of double).

Then, make the robot move by calling the method move() which also belongs to the RosbotClass class.

Repeat step 1: take the x position and the timestamp.

Instead of printing them in the shell, you will initialize a dictionary and store the time obtained as a key, and the x position as a value. Do it for all the values you obtained of x, 1 time, 2 times, .. , as many as you want.

Print the dictionary with the code provided in the Dictionaries section.

Remember to compile and execute the file as explained in section 1.2.
- do the following before any changes.

* cd ~/catkin_ws
* catkin_make
* source devel/setup.bash
the below command to execute the code
* rosrun c_scripts unit1_exercise 

https://s3.eu-west-1.amazonaws.com/notebooks.ws/cpp_for_robotics/unit2.html?AWSAccessKeyId=AKIAJLU2ZOTUFJRMDOAA&Signature=bULcAvkFhgw49btZAKZxWFPi%2BAI%3D&Expires=1698521127#Code-explanation
###################################################################################################
Original code 
###################################################################################################

#include "rosbot_control/rosbot_class.h"
#include <ros/ros.h>
#include <string>
#include <list>
#include <iostream>
#include <map>
using namespace std; 


int main(int argc, char **argv) {
  ros::init(argc, argv, "rosbot_node");

  RosbotClass rosbot;
  rosbot.move();

  float x_1 = rosbot.get_position(1);// modified
  float y_1 = rosbot.get_position(2);// modified 
  float time = rosbot.get_time();// modified

  ROS_INFO_STREAM(x_1 << " and " << y_1 << "and the time is " << time);

  rosbot.move();
    
  float x_2 = rosbot.get_position(1);
  float y_2 = rosbot.get_position(2);

  ROS_INFO_STREAM(x_2 << " and " << y_2);
  cout << "Hello c++" << " ";
  return 0;
}

#####################################################################################################
Solution 
#####################################################################################################


